/**
* Done by:
 * Student Name: Yaroslav Ivanchenko
 * Student Group: 123
 * Lab 1.7
 */

#include <iostream>

int main() {
    std::cout << "Динамічний розподіл пам'яті в купі\n" << std::endl;

    // Оголошення першого покажчика та захоплення пам'яті в купі
    int *p1 = new int; // Захоплення пам'яті
    if (p1 != nullptr) { // Перевірка успішного захоплення пам'яті
        *p1 = 25; // Присвоєння значення
        std::cout << "Значення через p1: " << *p1 << std::endl;
    } else {
        std::cout << "Не вдалося захопити пам'ять для p1." << std::endl;
    }

    // Оголошення другого покажчика та захоплення пам'яті в купі
    int *p2 = new int; // Захоплення пам'яті
    if (p2 != nullptr) { // Перевірка успішного захоплення пам'яті
        *p2 = 50; // Присвоєння значення
        std::cout << "Значення через p2: " << *p2 << std::endl;
    } else {
        std::cout << "Не вдалося захопити пам'ять для p2." << std::endl;
    }

    // Виведення адрес покажчиків та їх вмісту
    std::cout << "Адреса p1: " << p1 << ", значення: " << *p1 << std::endl;
    std::cout << "Адреса p2: " << p2 << ", значення: " << *p2 << std::endl;

    // Звільнення пам'яті
    delete p1;
    delete p2;

    // Встановлення покажчиків в nullptr для уникнення "сміття"
    p1 = nullptr;
    p2 = nullptr;

    // Приклад некоректного подвійного звільнення пам'яті (закоментовано)
    // delete p1; // Помилка: подвійне звільнення

    // Приклад некоректного звільнення пам'яті, яка не була захоплена
    int *p3 = nullptr;
    // delete p3; // Помилка: звільнення невизначеної пам'яті

    // Додавання покажчика у вкладеному блоці
    {
        int *p4 = new int;
        if (p4 != nullptr) {
            *p4 = 75;
            std::cout << "Значення через p4 (вкладений блок): " << *p4 << std::endl;
        }
        // Звільнення пам'яті
        delete p4;
        p4 = nullptr;
    }

    // Покажчик за межами вкладеного блоку
    int *p5 = new int;
    if (p5 != nullptr) {
        *p5 = 100;
        std::cout << "Значення через p5: " << *p5 << std::endl;
    }
    // Не звільняємо пам'ять для p5, створюючи "сміття"

    return 0;
}